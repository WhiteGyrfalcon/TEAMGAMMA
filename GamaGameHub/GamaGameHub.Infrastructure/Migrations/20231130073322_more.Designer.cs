// <auto-generated />
using System;
using GamaGameHub.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GamaGameHub.Infrastructure.Migrations
{
    [DbContext(typeof(GamaGameHubDbContext))]
    [Migration("20231130073322_more")]
    partial class more
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CategoryGame", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("GamesId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("CategoryGame");
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Shows the first 20 games, that have most likes.",
                            Name = "Top 20 most favourited games"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Shows 5 games, which have the most reviews.",
                            Name = "Top 5 most reviewed games"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Shows the first 25 adventure games, that have most likes.",
                            Name = "Top 25 adventure games"
                        });
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.Favourite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AverageStars")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("GameCreatorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GameCreatorId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageStars = 4,
                            CreatedOn = new DateTime(2020, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Apex Legends is the award-winning, free-to-play Hero Shooter from Respawn Entertainment.",
                            GameCreatorId = 1,
                            IsActive = true,
                            Name = "Apex Legends™",
                            Thumbnail = "https://fs-prod-cdn.nintendo-europe.com/media/images/10_share_images/games_15/nintendo_switch_download_software_1/2x1_NSwitchDS_ApexLegends_Season18_image1600w.jpg"
                        },
                        new
                        {
                            Id = 2,
                            AverageStars = 3,
                            CreatedOn = new DateTime(2016, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A multiplayer horror game where one player takes on the role of the savage Killer, and other four players play as Survivors, trying to escape.",
                            GameCreatorId = 2,
                            IsActive = true,
                            Name = "Dead by Daylight",
                            Thumbnail = "https://static0.gamerantimages.com/wordpress/wp-content/uploads/2023/05/dead_by_daylight_splash.jpg?q=50&fit=contain&w=1140&h=&dpr=1.5"
                        },
                        new
                        {
                            Id = 3,
                            AverageStars = 5,
                            CreatedOn = new DateTime(2023, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "The World's Game: the most true-to-football experience ever with HyperMotionV, PlayStyles optimized by Opta, and an enhanced Frostbite™ Engine.",
                            GameCreatorId = 1,
                            IsActive = true,
                            Name = "EA SPORTS FC™ 24",
                            Thumbnail = "https://assets.nintendo.com/image/upload/c_fill,w_1200/q_auto:best/f_auto/dpr_2.0/ncom/software/switch/70010000061749/bd653d83bdcc1613cfacae62845933633ce97fffc52e7e4070014eb41f9e75f7"
                        },
                        new
                        {
                            Id = 4,
                            AverageStars = 2,
                            CreatedOn = new DateTime(2021, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "First-person shooter, marks the return to the iconic warfare of the franchise. With a cutting-edge arsenal, you can engage in multiplayer battles.",
                            GameCreatorId = 2,
                            IsActive = true,
                            Name = "Battlefield™ 2042",
                            Thumbnail = "https://cdn1.epicgames.com/offer/52f57f57120c440fad9bfa0e6c279317/EGS_Battlefield2042_DICE_S1_2560x1440-4fd7701f78a23c971e429093fc1f6341"
                        },
                        new
                        {
                            Id = 5,
                            AverageStars = 2,
                            CreatedOn = new DateTime(2022, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Call of Duty is a franchise of several multiplayer first-person shooter games published by Activision.",
                            GameCreatorId = 1,
                            IsActive = true,
                            Name = "Call of Duty",
                            Thumbnail = "https://xxboxnews.blob.core.windows.net/prod/sites/2/2022/06/Call-of-Duty-Modern-Warfare-II_Reveal_X1_Wire_Hero_1920x1080-b5aea4e5ca6046ac478e.jpg"
                        },
                        new
                        {
                            Id = 6,
                            AverageStars = 3,
                            CreatedOn = new DateTime(2020, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Open-world, action-adventure RPG set in the Night City, where you play as a cyberpunk mercenary wrapped up in a do-or-die fight for survival.",
                            GameCreatorId = 2,
                            IsActive = true,
                            Name = "Cyberpunk 2077",
                            Thumbnail = "https://cdn1.epicgames.com/offer/77f2b98e2cef40c8a7437518bf420e47/EGS_Cyberpunk2077_CDPROJEKTRED_S1_03_2560x1440-359e77d3cd0a40aebf3bbc130d14c5c7"
                        },
                        new
                        {
                            Id = 7,
                            AverageStars = 5,
                            CreatedOn = new DateTime(2021, 9, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore a thrilling, open-world MMO filled with danger where you are an adventurer shipwrecked on the supernatural island of Aeternum.",
                            GameCreatorId = 1,
                            IsActive = true,
                            Name = "New World",
                            Thumbnail = "https://images.ctfassets.net/j95d1p8hsuun/29peK2k7Ic6FsPAVjHWs8W/06d3add40b23b20bbff215f6979267e8/NW_OPENGRAPH_1200x630.jpg"
                        },
                        new
                        {
                            Id = 8,
                            AverageStars = 1,
                            CreatedOn = new DateTime(2021, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "In the game's story mode, players assume the role of player character Master Chief, as he wages a war against the Banished, an alien faction.",
                            GameCreatorId = 2,
                            IsActive = true,
                            Name = "Halo Infinite",
                            Thumbnail = "https://i.ytimg.com/vi/HZtc5-syeAk/maxresdefault.jpg"
                        },
                        new
                        {
                            Id = 9,
                            AverageStars = 4,
                            CreatedOn = new DateTime(2023, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Play as a paranormal investigator in our hybrid between first person survival and psychological horror story game.",
                            GameCreatorId = 1,
                            IsActive = true,
                            Name = "The Devourer: Hunted Souls",
                            Thumbnail = "https://cdn.akamai.steamstatic.com/steam/apps/2309400/capsule_616x353.jpg?t=1698626279"
                        },
                        new
                        {
                            Id = 10,
                            AverageStars = 3,
                            CreatedOn = new DateTime(2023, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Open-world high-fantasy strategy RPG that takes players on an epic journey where they can discover a dynamic world.",
                            GameCreatorId = 2,
                            IsActive = true,
                            Name = "Dragonheir: Silent Gods",
                            Thumbnail = "https://i.ytimg.com/vi/OQFjIlOFJkg/maxresdefault.jpg"
                        });
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.GameCreator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("YearOfCreating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GameCreator");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalInformation = "Driven by passion, we are a global leader in digital interactive entertainment. We develop and deliver games, content, and online services for Internet-connected consoles, mobile devices, and PCs.",
                            IsActive = true,
                            UserId = "3d9a8eaf-5b3e-4b69-a101-74ff3787b7df",
                            YearOfCreating = 1982
                        },
                        new
                        {
                            Id = 2,
                            AdditionalInformation = "Innovation is our business. We strongly believe in trying new tech, methods, and ideas. It’s the result that counts, not how we get there.",
                            IsActive = true,
                            UserId = "7cd7370d-565d-4f77-9fd5-60d27985bbf1",
                            YearOfCreating = 1992
                        });
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "An action game is a video game genre that emphasizes physical challenges, including hand–eye coordination and reaction time. The genre includes a large variety of sub-genres, such as fighting games, beat 'em ups, shooter games, and platform games.",
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Description = "An adventure game (rarely called a quest game) is a video game genre in which the player assumes the role of a protagonist in an interactive story, driven by exploration and/or puzzle-solving. Most adventure games are designed for a single player.",
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Sports games are a video game genre that simulates sports. They are usually based on real-world sports, but can also be fictional or exaggerated. These games usually let the player control one or more athletes during competition.",
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Indie games stand for “independent video games.” At the highest level, they are games created by individuals or small teams who operate independently from major studios, both financially and creatively.",
                            Name = "Indie"
                        },
                        new
                        {
                            Id = 5,
                            Description = "A casual game is a video game targeted at a mass market audience, as opposed to a hardcore game, which is targeted at hobbyist gamers. Casual games may exhibit any type of gameplay and genre. They generally involve simpler rules, shorter sessions, and require less learned skill.",
                            Name = "Casual"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Simulation games are a diverse super-category of video games, generally designed to closely simulate real world activities. A simulation game attempts to copy various activities from real life in the form of a game for various purposes such as training, analysis, prediction, or entertainment.",
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Role-playing video game is electronic game genre in which players advance through a story quest, and often many side quests, for which their character or party of characters gain experience that improves various attributes and abilities.",
                            Name = "RPG"
                        },
                        new
                        {
                            Id = 8,
                            Description = "A strategy game is a game in which the players' uncoerced, and often autonomous, decision-making skills have a high significance in determining the outcome. Almost all strategy games require internal decision tree-style thinking, and typically very high situational awareness.",
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = 9,
                            Description = "A massively multiplayer online game (MMOG or MMO) is an online video game with a large number of players on the same server. MMOs usually feature a huge, persistent open world, although there are games that differ. These games can be found for most network-capable platforms.",
                            Name = "Massively Multiplayer"
                        });
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UrlPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PostId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameCreatorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("MainContent")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortContent")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GameCreatorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.PostComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("MainContent")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortContent")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.ReviewComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("ReviewComments");
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(169)
                        .HasColumnType("nvarchar(169)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c88b9f1-b872-4450-a600-c36f736aeea9",
                            AccessFailedCount = 0,
                            Address = "Aleksandar Batenberg 28",
                            City = "Karnobat",
                            ConcurrencyStamp = "069aa833-3905-41a7-b4f4-0d808a8a80c9",
                            Country = "Bulgaria",
                            Email = "petar@gmail.com",
                            EmailConfirmed = false,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETAR@GMAIL.COM",
                            NormalizedUserName = "PETAR",
                            PasswordHash = "AQAAAAEAACcQAAAAEEHGU8Umf6c6HQy2zDcYZjXkDMaTLUtksxHskCDlQFapUQfLG72S8Rl5saMeNgnkzw==",
                            PhoneNumber = "0893052673",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.freeiconspng.com%2Fimages%2Fprofile-icon-png&psig=AOvVaw3wTqNvIRQgdxukevliNioM&ust=1701414266054000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCIi0rJmU64IDFQAAAAAdAAAAABAE",
                            SecurityStamp = "0cd197e2-1a50-4a03-96e6-675104d66e3d",
                            TwoFactorEnabled = false,
                            UserName = "petar"
                        },
                        new
                        {
                            Id = "7113b6b6-07d4-4d57-8173-2a9d053834d4",
                            AccessFailedCount = 0,
                            Address = "Hristo Botev 15",
                            City = "Kazanlak",
                            ConcurrencyStamp = "0886e400-e988-4c77-9113-5ecb301eb4b2",
                            Country = "Bulgaria",
                            Email = "silvia@gmail.com",
                            EmailConfirmed = false,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SILVIA@GMAIL.COM",
                            NormalizedUserName = "SILVIA",
                            PasswordHash = "AQAAAAEAACcQAAAAEAkPiSB/TnClOsLo9r1lOKDn50HLarJsr5WQu3die2ZR9J9JuHCApymxuD9OXXdGng==",
                            PhoneNumber = "0888752419",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.freeiconspng.com%2Fimages%2Fprofile-icon-png&psig=AOvVaw3wTqNvIRQgdxukevliNioM&ust=1701414266054000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCIi0rJmU64IDFQAAAAAdAAAAABAE",
                            SecurityStamp = "35b53140-1918-4453-85e4-0c15c7468c26",
                            TwoFactorEnabled = false,
                            UserName = "silvia"
                        },
                        new
                        {
                            Id = "3d9a8eaf-5b3e-4b69-a101-74ff3787b7df",
                            AccessFailedCount = 0,
                            Address = "Redwood Shores Parkway 209",
                            City = "Redwood City, Northern California",
                            ConcurrencyStamp = "61697a1d-8ceb-489c-b6df-80cc946e5a5c",
                            Country = "USA",
                            Email = "electronicarts@gmail.com",
                            EmailConfirmed = false,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ELECTRONICARTS@GMAIL.COM",
                            NormalizedUserName = "ELECTRONIC ARTS",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ7IhlD4ThmfJVtI+4LvKT+TkDvoE3Z+5D1jCVrYoDAvKT6EfpWiiFtExCLq1TDbHQ==",
                            PhoneNumber = "16059719337",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.freeiconspng.com%2Fimages%2Fprofile-icon-png&psig=AOvVaw3wTqNvIRQgdxukevliNioM&ust=1701414266054000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCIi0rJmU64IDFQAAAAAdAAAAABAE",
                            SecurityStamp = "9d484e6a-c3b3-4e34-83bf-e2684b5b8082",
                            TwoFactorEnabled = false,
                            UserName = "Electronic Arts"
                        },
                        new
                        {
                            Id = "7cd7370d-565d-4f77-9fd5-60d27985bbf1",
                            AccessFailedCount = 0,
                            Address = "Main Street 22",
                            City = "Toronto",
                            ConcurrencyStamp = "8fe73332-f884-4f24-8009-3dba79839e84",
                            Country = "Canada",
                            Email = "bhvrinteractive@gmail.com",
                            EmailConfirmed = false,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BHVRINTERACTIVE@GMAIL.COM",
                            NormalizedUserName = "BEHAVIOUR INTERACTIVE INC.",
                            PasswordHash = "AQAAAAEAACcQAAAAEMGVHnnbwqmddv7S+OLbhznkasZ7QRYROPOGgJCwDMB1xnZCkyO8GeAHVj/BBqE6FA==",
                            PhoneNumber = "136579373378",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.freeiconspng.com%2Fimages%2Fprofile-icon-png&psig=AOvVaw3wTqNvIRQgdxukevliNioM&ust=1701414266054000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCIi0rJmU64IDFQAAAAAdAAAAABAE",
                            SecurityStamp = "b8ed9cf4-1fcf-4b16-aacf-0ff4e0618658",
                            TwoFactorEnabled = false,
                            UserName = "Behaviour Interactive Inc."
                        },
                        new
                        {
                            Id = "40b15c7b-dc76-4280-b025-4816f74e5f48",
                            AccessFailedCount = 0,
                            Address = "Metodii Kusev 32",
                            City = "Stara Zagora",
                            ConcurrencyStamp = "71b98555-ff1f-4b3b-8d27-531eccfd6b92",
                            Country = "Bulgaria",
                            Email = "gergana@gmail.com",
                            EmailConfirmed = false,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GERGANA@GMAIL.COM",
                            NormalizedUserName = "GERGANA",
                            PasswordHash = "AQAAAAEAACcQAAAAEIfv4QXP/RpHgxvZVNA5KDW/hq9hAwSL31+P7WLmgn1OaDDzvsgD+f/7em8TiwGJUg==",
                            PhoneNumber = "0986999728",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.freeiconspng.com%2Fimages%2Fprofile-icon-png&psig=AOvVaw3wTqNvIRQgdxukevliNioM&ust=1701414266054000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCIi0rJmU64IDFQAAAAAdAAAAABAE",
                            SecurityStamp = "543870af-679c-4dc3-a6d9-82a4bba0c0a9",
                            TwoFactorEnabled = false,
                            UserName = "gergana"
                        },
                        new
                        {
                            Id = "da389127-2cb6-4a2c-9afe-e609253e9391",
                            AccessFailedCount = 0,
                            Address = "Vasil Levski 8",
                            City = "Varna",
                            ConcurrencyStamp = "8f636127-0ae8-4699-8ea5-bef59cee350d",
                            Country = "Bulgaria",
                            Email = "stoyan@gmail.com",
                            EmailConfirmed = false,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STOYAN@GMAIL.COM",
                            NormalizedUserName = "STOYAN",
                            PasswordHash = "AQAAAAEAACcQAAAAED0+CxRQ7m75TXpkTIDxaGw+7IEQUyVjxycHAtKWKdKfNj/2Q3G7fxy6qkNdLI/nUg==",
                            PhoneNumber = "0898508050",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.freeiconspng.com%2Fimages%2Fprofile-icon-png&psig=AOvVaw3wTqNvIRQgdxukevliNioM&ust=1701414266054000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCIi0rJmU64IDFQAAAAAdAAAAABAE",
                            SecurityStamp = "16aa6199-96d9-4877-b9f1-e46b0cab8cab",
                            TwoFactorEnabled = false,
                            UserName = "stoyan"
                        });
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.Property<int>("GamesId")
                        .HasColumnType("int");

                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.HasKey("GamesId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3023896d-3caf-4d3a-9812-36f654921534",
                            ConcurrencyStamp = "cd147a79-c621-4b81-9d8b-65a29e6e96da",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "37c6416c-0f8e-4820-92c6-ebd52c680c8f",
                            ConcurrencyStamp = "dc90c38b-79fd-4ff7-bd91-fdb8d95c1f21",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "82254c24-56b0-4a91-9d25-9c43e89f9e92",
                            ConcurrencyStamp = "11aaae3d-b5c3-4e24-b470-fd264f0b52cb",
                            Name = "GameCreator",
                            NormalizedName = "GAMECREATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2c88b9f1-b872-4450-a600-c36f736aeea9",
                            RoleId = "37c6416c-0f8e-4820-92c6-ebd52c680c8f"
                        },
                        new
                        {
                            UserId = "7113b6b6-07d4-4d57-8173-2a9d053834d4",
                            RoleId = "3023896d-3caf-4d3a-9812-36f654921534"
                        },
                        new
                        {
                            UserId = "3d9a8eaf-5b3e-4b69-a101-74ff3787b7df",
                            RoleId = "82254c24-56b0-4a91-9d25-9c43e89f9e92"
                        },
                        new
                        {
                            UserId = "40b15c7b-dc76-4280-b025-4816f74e5f48",
                            RoleId = "3023896d-3caf-4d3a-9812-36f654921534"
                        },
                        new
                        {
                            UserId = "da389127-2cb6-4a2c-9afe-e609253e9391",
                            RoleId = "37c6416c-0f8e-4820-92c6-ebd52c680c8f"
                        },
                        new
                        {
                            UserId = "7cd7370d-565d-4f77-9fd5-60d27985bbf1",
                            RoleId = "82254c24-56b0-4a91-9d25-9c43e89f9e92"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CategoryGame", b =>
                {
                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.Favourite", b =>
                {
                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.Game", "Game")
                        .WithMany("Favourites")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.User", "User")
                        .WithMany("Favourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.Game", b =>
                {
                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.GameCreator", "GameCreator")
                        .WithMany("Games")
                        .HasForeignKey("GameCreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameCreator");
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.GameCreator", b =>
                {
                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.Image", b =>
                {
                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.Game", "Game")
                        .WithMany("Images")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.Post", null)
                        .WithMany("Images")
                        .HasForeignKey("PostId");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.Post", b =>
                {
                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.GameCreator", "GameCreator")
                        .WithMany()
                        .HasForeignKey("GameCreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameCreator");
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.PostComment", b =>
                {
                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.Review", b =>
                {
                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.Game", "Game")
                        .WithMany("Reviews")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.ReviewComment", b =>
                {
                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.Review", "Review")
                        .WithMany("GameComments")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GamaGameHub.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.Game", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("Images");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.GameCreator", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.Review", b =>
                {
                    b.Navigation("GameComments");
                });

            modelBuilder.Entity("GamaGameHub.Infrastructure.Data.Entities.User", b =>
                {
                    b.Navigation("Favourites");
                });
#pragma warning restore 612, 618
        }
    }
}
